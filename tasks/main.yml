---
- name: Assert supported OS
  tags: nginx
  when: not nginx_config_only
  assert:
    that:
      - ansible_os_family in nginx_supported_platforms
      - ansible_distribution + '-' + ansible_distribution_major_version in nginx_supported_distributions


- name: Include OS familiy specific vars
  tags: nginx
  include: "{{ role_path }}/../silpion.lib/tasks/os-specific-vars.yml"

- name: Install required directories
  tags: nginx
  with_items:
    - "{{ nginx_config_basepath }}"
    - "{{ nginx_config_basepath + '/conf.d' }}"
  become: "{{ nginx_become_enable }}"
  file:
    state: directory
    path: "{{ item }}"

- name: Install nginx facts
  tags: nginx
  become: "{{ nginx_become_enable }}"
  when: not nginx_config_only
  include: "{{ role_path }}/../silpion.lib/tasks/localfacts.yml"
  vars:
    template: facts.j2
    namespace: nginx

- name: Assert epel is enabled
  tags: nginx
  when:
    - ansible_os_family == 'RedHat'
    - not nginx_config_only
  assert:
    that: nginx_epel_enabled

- name: Update apt package cache
  tags: nginx
  become: "{{ nginx_become_enable }}"
  when:
    - ansible_os_family == 'Debian'
    - not nginx_config_only
  apt:
    update_cache: true
    cache_valid_time: "{{ util_apt_cache_valid_time|default(3600) }}"

- name: Install required packages
  tags: nginx
  become: "{{ nginx_become_enable }}"
  with_items: "{{ nginx_required_packages }}"
  when: not nginx_config_only
  action: "{{ ansible_pkg_mgr }} state=installed name={{ item }}"

- name: Ensure default vhost is absent
  tags: nginx
  notify: service reload nginx
  become: "{{ nginx_become_enable }}"
  file:
    state: absent
    path: "{{ nginx_config_basepath + '/sites-enabled/default' }}"

- name: Deploy nginx.conf
  tags: nginx
  notify: service restart nginx
  become: "{{ nginx_become_enable }}"
  template:
    src: "{{ nginx_template_conf|default('builtin_nginx.conf.j2') }}"
    dest: "{{ nginx_config_basepath + '/nginx.conf'}}"
    mode: 0644
    backup: "{{ nginx_config_backup }}"

- name: Deploy tls_params
  tags: nginx
  notify: service restart nginx
  become: "{{ nginx_become_enable }}"
  when: nginx_ssl_enable
  template:
    src: "{{ nginx_template_params_tls|default('builtin_tls_params.j2') }}"
    dest: "{{ nginx_config_basepath + '/tls_params' }}"
    mode: 0644
    backup: "{{ nginx_config_backup }}"

- name: Ensure tls_params file is absent
  tags: nginx
  notify: service restart nginx
  become: "{{ nginx_become_enable }}"
  when: not nginx_ssl_enable
  file: path="{{ nginx_config_basepath + '/tls_params' }}" state=absent

- name: Deploy static configuration files
  tags: nginx
  notify: service reload nginx
  become: "{{ nginx_become_enable }}"
  with_items:
    - proxy_params
    - mime.types
  copy:
    src: "{{ item }}"
    dest: "{{ nginx_config_basepath + '/' + item }}"
    backup: "{{ nginx_config_backup }}"

- name: Deploy vhosts
  tags: nginx
  notify: service reload nginx
  become: "{{ nginx_become_enable }}"
  with_items: "{{ nginx_vhosts }}"
  template:
    src: "{{ item.template|default('builtin_rproxy.conf.j2') }}"
    dest: "{{ nginx_config_basepath + '/conf.d/' + item['servername'] + '.conf' }}"
    mode: 0644
    backup: "{{ nginx_config_backup }}"

- name: Deploy htpasswd
  tags: nginx
  with_subelements:
    - "{{ nginx_vhosts|selectattr('htpasswd', 'defined')|list }}"
    - htpasswd
  become: "{{ nginx_become_enable }}"
  htpasswd:
    state: present
    path: "{{ nginx_config_basepath + '/conf.d/' + item[0]['servername'] + '.htpasswd' }}"
    name: "{{ item.1.name }}"
    password: "{{ item.1.password }}"

- name: Generate dhparam
  tags: nginx
  become: "{{ nginx_become_enable }}"
  when: nginx_ssl_enable
  command: openssl dhparam -out {{ nginx_dhparam_path }} {{ nginx_dhparam_strength }}
  args:
    creates: "{{ nginx_dhparam_path }}"

- name: Ensure dhparam file is absent
  tags: nginx
  notify: service restart nginx
  become: "{{ nginx_become_enable }}"
  when: not nginx_ssl_enable
  file: path="{{ nginx_dhparam_path }}" state=absent

- name: Protect dhparam
  tags: nginx
  become: true
  when: nginx_become_enable and nginx_ssl_enable
  file:
    path: "{{ nginx_dhparam_path }}"
    owner: 0
    group: 0
    mode: 0600

- name: Register SELinux state
  tags: nginx
  check_mode: no
  ignore_errors: true
  failed_when: false
  changed_when: false
  register: nginx_registered_selinux_state
  become: "{{ nginx_become_enable }}"
  command: selinuxenabled

- name: Set httpd_can_network_connect
  tags: nginx
  become: "{{ nginx_become_enable }}"
  when:
    - nginx_registered_selinux_state.rc == 0
    - nginx_httpd_can_network_connect
    - not nginx_config_only
  seboolean:
    state: true
    persistent: true
    name: httpd_can_network_connect

# The purpose of this is to detect configuration errors when the service nginx reload handler
# is triggered.
# This is important because the reload handler never fails if the service was already up, the NginX
# service just keeps running with the old config. We don't want such behaviour, we want the role to fail
# if a faulty configuration was deployed
- name: Check config
  tags: nginx
  changed_when: false
  become: "{{ nginx_become_enable }}"
  when: not nginx_config_only
  command: 'nginx -t'

- name: Ensure nginx service
  tags: nginx
  become: "{{ nginx_become_enable }}"
  when: not nginx_config_only
  service:
    state: started
    name: nginx
    enabled: yes

- name: Notify reload nginx when tlscert_changed
  tags: nginx
  notify: service reload nginx
  when: tlscert_changed|default(false)
  command: "true"
